// <auto-generated />
using MediChain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediChain.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241016025327_addProduct")]
    partial class addProduct
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MediChain.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Medicine",
                            DisplayOrder = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Medical Equipment",
                            DisplayOrder = 2
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Miscellaneous",
                            DisplayOrder = 3
                        });
                });

            modelBuilder.Entity("MediChain.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Description = "500MG,Painkiller",
                            Price = 10.0,
                            ProductName = "Paracetamol"
                        },
                        new
                        {
                            ProductId = 2,
                            Description = "3 Ply, Pack of 50",
                            Price = 50.0,
                            ProductName = "Surgical Mask"
                        },
                        new
                        {
                            ProductId = 3,
                            Description = "500ML, 70% Alcohol",
                            Price = 100.0,
                            ProductName = "Hand Sanitizer"
                        },
                        new
                        {
                            ProductId = 4,
                            Description = "Infrared, Non-Contact",
                            Price = 200.0,
                            ProductName = "Digital Thermometer"
                        },
                        new
                        {
                            ProductId = 5,
                            Description = "Pack of 10",
                            Price = 150.0,
                            ProductName = "Face Shield"
                        },
                        new
                        {
                            ProductId = 6,
                            Description = "Fingertip, Blood Oxygen Monitor",
                            Price = 500.0,
                            ProductName = "Pulse Oximeter"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
